@model IEnumerable<Liblio.Models.Employee>
@{
    ViewBag.Title = "Employees";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Employee Management</h2>
<p>
    @Html.ActionLink("New Employee", "New", "Employee", null, new { @class = "btn btn-primary" })
</p>

<h3>Employees</h3>
<table id="employees" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Full Name</th>
            <th>Salary</th>
            <th>Reports to</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<h3>Managers</h3>
<table id="managers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Full Name</th>
            <th>Salary</th>
            <th>Reports to</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

<h3>CEO</h3>
<table id="ceo" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Full Name</th>
            <th>Salary</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

@section scripts
{
    <script>
        $(document).ready(function () {
            var tableData = [];
            var employeeData = [];
            var managerData = [];
            var ceoData = [];

            $.ajax({
                url: "/api/employees",
                contentType: "application/json",
                dataType: 'json',
                async: false,
                success: function (result) {
                    tableData = result;
                    employeeData = result.filter(r => !r.isCEO && !r.isManager);
                    managerData = result.filter(r => r.isManager);
                    ceoData = result.filter(r => r.isCEO);
                }
            });

            var employeeTable = $("#employees").DataTable({
                "bLengthChange": false,
                "bFilter": false,
                data: employeeData,
                columns: [
                    {
                        data: "firstName",
                        render: function (data, type, employee) {
                            return "<a href='/employee/edit/" + employee.id + "'>" + employee.firstName + " " + employee.lastName + "</a>";
                        }
                    },
                    {
                        data: "salary",
                    },
                    {
                        data: "managerId",
                        render: function (data, type, employee) {
                            var manager = tableData.find(e => e.id === data);
                            return manager ? manager.firstName + " " + manager.lastName : null;
                        }
                    },
                    {
                        data: "id",
                        "sortable": false,
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-employee-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            var managerTable = $("#managers").DataTable({
                "bLengthChange": false,
                "bFilter": false,
                data: managerData,
                columns: [
                    {
                        data: "firstName",
                        render: function (data, type, employee) {
                            return "<a href='/employee/edit/" + employee.id + "'>" + employee.firstName + " " + employee.lastName + "</a>";
                        }
                    },
                    {
                        data: "salary",
                    },
                    {
                        data: "managerId",
                        render: function (data, type, employee) {
                            var manager = tableData.find(e => e.id === data);
                            return manager ? manager.firstName + " " + manager.lastName : null;
                        }
                    },
                    {
                        data: "id",
                        "sortable": false,
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-employee-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            var ceoTable = $("#ceo").DataTable({
                "bLengthChange": false,
                "bFilter": false,
                data: ceoData,
                columns: [
                    {
                        data: "firstName",
                        render: function (data, type, employee) {
                            return "<a href='/employee/edit/" + employee.id + "'>" + employee.firstName + " " + employee.lastName + "</a>";
                        }
                    },
                    {
                        data: "salary",
                    },
                    {
                        data: "id",
                        "sortable": false,
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-employee-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            $('#employees').on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this employee?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/employees/" + button.attr("data-employee-id"),
                            method: "DELETE",
                            success: function () {
                                employeeTable.row(button.parents("tr")).remove().draw();
                                toastr.success("Employee successfully deleted.");
                            }
                        });
                    }
                });
            })

            $('#managers').on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this employee?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/employees/" + button.attr("data-employee-id"),
                            method: "DELETE",
                            success: function () {
                                managerTable.row(button.parents("tr")).remove().draw();
                                toastr.success("Employee successfully deleted.");
                            },
                            error: function () {
                                toastr.error("Can't delete manager of employees. Please first delete subordinates before trying again.");
                            }
                        });
                    }
                });
            })

            $('#ceo').on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure you want to delete this employee?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/employees/" + button.attr("data-employee-id"),
                            method: "DELETE",
                            success: function () {
                                ceoTable.row(button.parents("tr")).remove().draw();
                                toastr.success("Employee successfully deleted.");
                            },
                            error: function () {
                                toastr.error("Can't delete manager of employees. Please first delete subordinates before trying again.");
                            }
                        });
                    }
                });
            })
        });
    </script>
}